// Sources from https://github.com/google/tarpc

use clap::{App, Arg};
use futures::{future, prelude::*};
use service::Xmas;
use std::{
    io,
    net::{IpAddr, SocketAddr},
};
use tarpc::{
    context,
    server::{self, Channel, Handler},
    tokio_serde::formats::Json,
};
use std::env;

// This is the type that implements the generated World trait. It is the business logic
// and is used to start the server.
#[derive(Clone)]
struct XmasServer(SocketAddr);

#[tarpc::server]
impl Xmas for XmasServer {
    async fn xmas(self, _: context::Context, secret: String) -> String {
        if secret == "XMAS" {
            let flag = env::var("SECRET").unwrap_or("none".to_string());
            format!("Congratz! Here is the secret: {}!", flag)
            //session_handle = u32::from_be(open_session_resp.ulSessionHandle);
        } else {
            format!("Hello, XMAS follower! You did not provide the right secret!! Sorry!!")
        }
        
    }
}

#[tokio::main]
async fn main() -> io::Result<()> {
    env_logger::init();

    let flags = App::new("Hello Server")
        .version("0.1")
        .author("Tim <tikue@google.com>")
        .about("Say hello!")
        .arg(
            Arg::with_name("port")
                .short("p")
                .long("port")
                .value_name("NUMBER")
                .help("Sets the port number to listen on")
                .required(true)
                .takes_value(true),
        )
        .get_matches();


    if env::var("SECRET").is_err() {
        println!("Please set the SECRET Environment!");
        return Ok(());
        //session_handle = u32::from_be(open_session_resp.ulSessionHandle);
    }

    let port = flags.value_of("port").unwrap();
    let port = port
        .parse()
        .unwrap_or_else(|e| panic!(r#"--port value "{}" invalid: {}"#, port, e));

    let server_addr = (IpAddr::from([0, 0, 0, 0]), port);

    // JSON transport is provided by the json_transport tarpc module. It makes it easy
    // to start up a serde-powered json serialization strategy over TCP.
    let mut listener = tarpc::serde_transport::tcp::listen(&server_addr, Json::default).await?;
    listener.config_mut().max_frame_length(4294967296);
    listener
        // Ignore accept errors.
        .filter_map(|r| future::ready(r.ok()))
        .map(server::BaseChannel::with_defaults)
        // Limit channels to 1 per IP.
        .max_channels_per_key(1, |t| t.as_ref().peer_addr().unwrap().ip())
        // serve is generated by the service attribute. It takes as input any type implementing
        // the generated World trait.
        .map(|channel| {
            let server = XmasServer(channel.as_ref().as_ref().peer_addr().unwrap());
            channel.respond_with(server.serve()).execute()
        })
        // Max 10 channels.
        .buffer_unordered(10)
        .for_each(|_| async {})
        .await;

    Ok(())
}
